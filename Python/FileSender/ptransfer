#!/usr/bin/env python3
import os
from os import system, name
from os.path import exists
from os.path import getsize
import socket
import sys
import hashlib
import time


if len(sys.argv) < 2:
    print("Usage: ptransfer <IP Address> [[s]end/[r]eceive] [reversed (T/F)] [filepath] [port]")
    exit()


# Remote ip address
IPAddr = sys.argv[1]


# Port used for connection
Port = 5050


# Decorative
loading_idx = 0


# Filename
fileName = "" 

rev = None
if len(sys.argv) > 3:
    if 't' in sys.argv[3]:
        rev = True
    else:
        rev = False

stype = False
if len(sys.argv) > 2:
    if 's' in sys.argv[2]:
        stype = 's'
    else:
        stype = 'r'

if len(sys.argv) > 5 and stype == 's':
    Port = int(sys.argv[5])
elif len(sys.argv) > 4 and stype == 'r':
    Port = int(sys.argv[4])

if len(sys.argv) > 4 and stype == 's':
    fileName = sys.argv[4]

# Hash a given value using SHA256
def hash256(fileName):
    sha256_hash = hashlib.sha256()
    with open(fileName,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()
        

def client_file_exists(s):
    data = s.recv(4096).decode()
    if 'SIZE' in data:
        return (True, int(data.split('SIZE:')[1]))
    return (False, 0)


def get_read_threshold(fileSize):
    if fileSize > 2000000:
        return 2000000
    elif fileSize > 200000:
        return 200000
    elif fileSize > 20000:
        return 20000
    elif fileSize > 2000:
        return 2000
    return 1


def accept_ping(server):
    try:
        s, addr = server.accept()
        msg = s.recv(4096).decode()[:-1]
        if msg.replace('\n','').replace('\r','') == 'init':
            return (True, s)
        print('(*) Received ping from ' + addr[0] + ':' + str(addr[1]))
        s.send(b'REPLY\n')
        return (False, s)
    except Exception as e:
        print(e)
        accept_ping(server)
    return (False, s)


def get_send_socket(server, rev):
    global IPAddr, Port
    if not rev:
        server.bind((IPAddr, Port))
        server.listen(True)
        print(f'[*] Listening for connections on {IPAddr}:{Port}...')
        ping_result = accept_ping(server)
        while not ping_result[0]:
            ping_result = accept_ping(server)
        print(f'[*] Client connected. Starting transfer...')
        s = ping_result[1]
    else:
        s = socket.socket()
        print(f'[*] Connecting to {IPAddr}:{Port}...')
        s.connect((IPAddr, Port))
        s.recv(4096)
    return s



# Send file to remote
def send_file(server, rev):
    global fileName
    if not len(fileName):
        print("[#] Please enter filename with extension!")
        fileName = input("#> ")
        if not len(fileName):
            send_file()
    s = get_send_socket(server, rev)
    s.send(bytes(os.path.basename(fileName), 'utf-8') + b'\n')
    s.recv(4096)
    f = open(fileName,'rb')
    s.send(bytes(str(getsize(fileName)) + '\n','utf-8'))
    exists, current_size = client_file_exists(s)
    if exists:
        print(f'[!] File exists! Reading {current_size} bytes...')
        i = 0
        while i < current_size:
            threshold = get_read_threshold(current_size - i)
            f.read(threshold)
            i += threshold
    s.send(b'Ready for transfer!\n')
    s.recv(4096).decode()
    print('[^] Sending file...')
    while True:
        try:
            data = f.read(2000000)
            if not len(data):
                break
            s.send(data)
        except Exception as e:
            break
    s.recv(4096).decode()
    original_hash = hash256(fileName)
    s.send(bytes(original_hash, 'utf-8') + b'\n')
    f.close()
    print("[✓] File transfer complete.")
    server.close()


def get_readable_file_size(file_size):
    if -1000 < file_size < 1000:
        return f"{file_size} B"
    
    suffix = "kMGTPE"
    ci = iter(suffix)

    for i in range(len(suffix)):
        if file_size <= -999_950 or file_size >= 999_950:
            file_size /= 1000
        else:
            break
    file_size /= 1000
    return f"{file_size:.1f} {suffix[i]}B"


def get_loading_char():
    """
    Decorative loading animation.
    """
    global loading_idx
    try:
        loading_idx += 1
        loading_idx %= 40
        if loading_idx >= 20:
            return '⟳'
        return '↻'
    except:
        return '[*]'


def print_file_size(received_size, previous_file_size, fileSize):
    if previous_file_size != fileSize:
        print(f"[{get_loading_char()}] Received {received_size} / {fileSize}{' ' * 10}", end='\r')


def check_hashes_match(client_socket, fileName):
    print("[?] Checking Hashes:")
    client_socket.send(b'GIVE_ME_HASH\n')
    original_hash = client_socket.recv(4096).decode()[:-1].strip()
    received_file_hash = hash256(fileName)
    print("\t[Original Hash]: %s\n\t[Received Hash]: %s" % (original_hash, received_file_hash))
    if original_hash == received_file_hash:
        print("[✓] Hashes match!")
    else:
        print("[x] Hash mismatch, delete file?")
        user_input = input("Y/N #> ")
        if 'y' in user_input.lower():
            os.remove(fileName)
            print("[✓] Deleted File!")


def initial_client_comm(client_socket):
    client_socket.send(b'init\n')
    fileName = client_socket.recv(4096).decode()[:-1].strip()
    client_socket.send(b'Received Name\n')
    original_size = int(client_socket.recv(4096).decode()[:-1])
    print("[?] Receiving file...")
    return (fileName, original_size)


def check_file_exists(client_socket, fileName, file_exists):
    if file_exists:
        current_size = getsize(fileName)
        old_filename = fileName + 'old'
        os.rename(fileName, old_filename)
        i = 0
        old_fis = open(old_filename, 'rb')
        with open(fileName, 'wb+') as f:
            while i < current_size:
                threshold = get_read_threshold(current_size - i)
                f.write(old_fis.read(threshold))
                i += threshold
        os.remove(old_filename)
        client_socket.send(bytes(f'SIZE:{current_size}\n', 'utf-8'))
        return current_size
    else:
        client_socket.send(b'NONEXISTANT\n')
        return 0


def receive_file(rev):
    global IPAddr, Port, fileName
    try:
        if not rev:
            client_socket = socket.socket()
            print(f'[*] Connecting to {IPAddr}:{Port}...')
            client_socket.connect((IPAddr,Port))
            print('[*] Connected. Beginning transfer...')
        else:
            server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server.bind((IPAddr, Port))
            server.listen(True)
            print(f'[*] Listening for connections on {IPAddr}:{Port}...')
            client_socket, client_addr = server.accept()
            print(f'[*] Client connected from {client_addr[0]}:{client_addr[1]}. Starting transfer...')
        fileName, original_size = initial_client_comm(client_socket)
        fileSize = get_readable_file_size(original_size)
        previous_file_size = ""
        start_time = time.time()
        file_exists = exists(fileName)
        i = check_file_exists(client_socket, fileName, file_exists)
        client_socket.recv(4096).decode()
        client_socket.send(b'Beginning file transfer...\n')
        if i < original_size:
            f = None
            if exists:
                f = open(fileName, 'ab')
            else:
                f = open(fileName, 'wb+')
            done = False
            while not done:
                data = client_socket.recv(20000000)
                i = i + len(data)
                if i >= original_size:
                    done = True
                f.write(data)
                received_size = get_readable_file_size(i)
                print_file_size(received_size, previous_file_size, fileSize)
                previous_file_size = received_size
            f.close()
        end_time = time.time()
        print()
        check_hashes_match(client_socket, fileName)
        print(f'[✓] Transfer done in {round(end_time - start_time, 1)} seconds.')
    finally:
        client_socket.close()
    exit()


# Setup
def setup():
    global rev, stype
    if stype in ['s','r']:
        selected = stype
    else:
        print("[#] Please select type send/receive")
        selected = input("#> ")
    if rev is None:
        print("Would you like to run in reverse connection mode (sender connects to receiver)?")
        print('- True: Receiver must start script FIRST.')
        print('- False (default): Sender must start script FIRST.')
        print('(*) Note: Android and Java variants dont support reverse mode!')
        rev = input('(True/False) #> ')
        if 't' in rev.lower():
            print('[*] Running in reverse mode\n')
            rev = True
        else:
            rev = False
    if "s" in selected:
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            send_file(server, rev)
        except Exception as e:
            print(e)
            server.close()
    elif "r" in selected:
        receive_file(rev)
    else:
        setup()


setup()
