#!/usr/bin/env python3
# Generated by GPT 4o, refined by Leonard Haddad, 2024.
import os
import argparse

home_dir: str = os.path.expanduser("~")
ssh_config_path: str = os.path.join(home_dir, ".ssh", "config")

def add_ssh_config(host_alias: str, hostname: str, identity_file: str, username: str) -> None:
    identity_file = os.path.expanduser(identity_file)

    if not os.path.exists(ssh_config_path):
        os.makedirs(os.path.dirname(ssh_config_path), exist_ok=True)
        open(ssh_config_path, 'w').close()

    with open(ssh_config_path, 'r') as f:
        ssh_config = f.read()

    if f"Host {host_alias}" in ssh_config:
        print(f"SSH config for {host_alias} already exists.")
        exit()
    
    print(f"Adding SSH config for {host_alias}")

    ssh_entry = f"""
# {host_alias} configuration
Host {host_alias}
    HostName {hostname}
    User {username}
    IdentityFile {identity_file}
    IdentitiesOnly yes
"""
    with open(ssh_config_path, 'a') as f:
        f.write(ssh_entry)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Add SSH config for a remote domain.")
    parser.add_argument('-d', "--domain", help="The remote domain name (e.g., github.com, gitlab.com)", required=True)
    parser.add_argument('-k', "--keyloc", help="The location of the (private) SSH key on disk", required=True)
    args = parser.parse_args()

    username = 'Leonard' # Change to yours
    add_ssh_config(args.domain, args.domain, args.keyloc, username)
    print("SSH configuration complete!")
