#!/usr/bin/env python3
"""
MiniHTTPServer by Leonard Haddad

A minimal python http server

Usage in accords with the MIT License
"""
import socket
import os.path
from time import strftime, gmtime
import mimetypes
import sys


IP = "0.0.0.0"
PORT = 80

if len(sys.argv) == 2:
	PORT = int(sys.argv[1])
elif len(sys.argv) == 3:
	IP = sys.argv[1]
	PORT = int(sys.argv[2])

print(f'[MiniHTTPServer] Serving HTTP on http://{IP}:{PORT}/')


HTTP_ERROR = b"""\
HTTP/1.1 404 File not found
Server: MiniHTTPServer/0.1
Access-Control-Allow-Origin: *
Connection: close
Content-Type: text/html; charset=utf-8
Content-Length: 0
"""

HTTP_DATA = b"""\
HTTP/1.0 200 OK
Server: MiniHTTPServer/0.1
Date: [DATE]
Content-Type: text/plain
Content-Length: [CONTENT_LENGTH]
Content-Disposition: inline; filename="[FILENAME]"

[FILE_DATA]\
"""


s = socket.socket()
s.bind((IP, PORT))
s.listen(1)


def handle_html_file(filepath):
	file_data = []
	with open(filepath, 'r') as f:
		file_data = f.read()
	return HTTP_DATA.replace(b'text/plain', b'text/html; charset=utf-8')\
					.replace(b'HTTP/1.0', b'HTTP/1.1')\
					.replace(b'[CONTENT_LENGTH]', bytes(str(len(file_data)), 'utf-8'))\
					.replace(b'[DATE]', bytes(strftime("%a, %d %b %Y %H:%M:%S GMT", gmtime()), 'utf-8'))\
					.replace(b'[FILENAME]', bytes(filepath.split('/')[-1], 'utf-8'))\
					.replace(b'[FILE_DATA]', bytes(file_data, 'utf-8'))


def handle_file(filepath):
	file_data = []
	with open(filepath, 'rb') as f:
		file_data = f.read()
	mimetype = mimetypes.guess_type(filepath)[0]
	if mimetype == None:
		mimetype = 'text/plain'
	return HTTP_DATA.replace(b'text/plain', bytes(mimetype, 'utf-8'))\
					.replace(b'[CONTENT_LENGTH]', bytes(str(len(file_data)), 'utf-8'))\
					.replace(b'[DATE]', bytes(strftime("%a, %d %b %Y %H:%M:%S GMT", gmtime()), 'utf-8'))\
					.replace(b'[FILENAME]', bytes(filepath.split('/')[-1], 'utf-8'))\
					.replace(b'[FILE_DATA]', file_data)


def get_file_data(filepath):
	print(filepath)
	if filepath.endswith('/') or len(filepath) == 0:
		filepath += 'index.html'
	if not os.path.isfile(filepath):
		return HTTP_ERROR
	if filepath.endswith('.html'):
		return handle_html_file(filepath)
	else:
		return handle_file(filepath)


def handle_get(url):
	return get_file_data(url.strip())


while True:
	client, client_addr = s.accept()
	HTTP_request = client.recv(4096).decode()
	print(HTTP_request)
	if HTTP_request.startswith('GET'):
		url = (HTTP_request.split('GET')[1].split('HTTP')[0])[2:]
		client.send(handle_get(url))
	client.close()


s.close()